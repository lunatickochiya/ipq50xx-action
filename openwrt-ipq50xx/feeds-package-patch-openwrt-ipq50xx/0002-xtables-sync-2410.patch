From 0f21e22ca0f8b0cc77d1e8c35d67f4ca491d5492 Mon Sep 17 00:00:00 2001
From: lunatickochiya <125438787@qq.com>
Date: Sat, 13 Sep 2025 16:16:03 +0800
Subject: [PATCH 2/2] xtables:sync 2410

---
 net/xtables-addons/Makefile                   |  62 +++++---
 .../001-fix-kernel-version-detection.patch    |   2 +-
 .../patches/100-add-rtsp-conntrack.patch      |   4 +-
 .../patches/200-add-lua-packetscript.patch    |  78 +++++-----
 .../patches/201-fix-lua-packetscript.patch    | 136 ------------------
 .../patches/210-freebsd-build-fix.patch       |  11 --
 .../patches/300-fix-path-Makefile.extra.patch |  11 ++
 7 files changed, 102 insertions(+), 202 deletions(-)
 delete mode 100644 net/xtables-addons/patches/201-fix-lua-packetscript.patch
 delete mode 100644 net/xtables-addons/patches/210-freebsd-build-fix.patch
 create mode 100644 net/xtables-addons/patches/300-fix-path-Makefile.extra.patch

diff --git a/net/xtables-addons/Makefile b/net/xtables-addons/Makefile
index dfb34b516..5c248634a 100644
--- a/net/xtables-addons/Makefile
+++ b/net/xtables-addons/Makefile
@@ -1,26 +1,26 @@
+# SPDX-License-Identifier: GPL-2.0-only
 #
 # Copyright (C) 2009-2013 OpenWrt.org
 #
-# This is free software, licensed under the GNU General Public License v2.
-# See /LICENSE for more information.
-#
 
 include $(TOPDIR)/rules.mk
 include $(INCLUDE_DIR)/kernel.mk
 
 PKG_NAME:=xtables-addons
-PKG_VERSION:=3.21
-PKG_RELEASE:=$(AUTORELEASE)
-PKG_HASH:=2e09ac129a14f5e9c23b115ebcdfff4aa84e2aeba1268dbdf39b2d752bd71e19
+PKG_VERSION:=3.26
+PKG_RELEASE:=1
+PKG_HASH:=0b52df2117bacf2e32d1d3f98d09dbf88b274390733d3955699b108acaf9f2a6
 
 PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.xz
 PKG_SOURCE_URL:=https://inai.de/files/xtables-addons/
 PKG_BUILD_DEPENDS:=iptables
+
 PKG_INSTALL:=1
 PKG_BUILD_PARALLEL:=1
 
 PKG_MAINTAINER:=Jo-Philipp Wich <jo@mein.io>
 PKG_LICENSE:=GPL-2.0
+PKG_LICENSE_FILES:=COPYING
 
 PKG_FIXUP:=autoreconf
 PKG_ASLR_PIE:=0
@@ -41,15 +41,6 @@ CONFIGURE_ARGS+= \
 	--with-kbuild="$(LINUX_DIR)" \
 	--with-xtlibdir="/usr/lib/iptables"
 
-ifdef CONFIG_EXTERNAL_TOOLCHAIN
-MAKE_FLAGS:= \
-	$(patsubst ARCH=%,ARCH=$(LINUX_KARCH),$(MAKE_FLAGS)) \
-	DEPMOD="/bin/true"
-
-MAKE_INSTALL_FLAGS:= \
-	$(patsubst ARCH=%,ARCH=$(LINUX_KARCH),$(MAKE_FLAGS)) \
-	DEPMOD="/bin/true"
-else
 define Build/Compile
 	+$(MAKE) $(PKG_JOBS) -C $(PKG_BUILD_DIR) \
 		$(KERNEL_MAKE_FLAGS) \
@@ -65,7 +56,6 @@ define Build/Install
 		DEPMOD="/bin/true" \
 		install
 endef
-endif
 
 # 1: extension/module suffix used in package name
 # 2: extension/module display name used in package title/description
@@ -129,6 +119,42 @@ define Package/iptaccount/install
 endef
 
 
+define Package/iptasn
+  $(call Package/xtables-addons)
+  CATEGORY:=Network
+  TITLE:=iptables-mod-asn support scripts for MaxMind ASN databases
+  DEPENDS:=iptables +iptables-mod-asn \
+		+perl +perlbase-getopt +perlbase-io +perl-text-csv_xs \
+		+perl-net-cidr-lite \
+		+wget-ssl +!BUSYBOX_CONFIG_ZCAT:gzip
+endef
+
+define Package/iptasn/config
+	menu "Select iptasn options"
+		config IPTASN_PRESERVE
+			bool "Preserve across sysupgrades"
+			default n
+			help
+			  Backup and restore during sysupgrade (requires >7MB)
+	endmenu
+endef
+
+ifeq ($(CONFIG_IPTASN_PRESERVE),y)
+define Package/iptasn/conffiles
+/usr/share/xt_asn/
+endef
+endif
+
+define Package/iptasn/install
+	$(INSTALL_DIR) $(1)/usr/lib/xtables-addons
+	$(CP) \
+		$(PKG_INSTALL_DIR)/usr/lib/xtables-addons/xt_asn_{build,dl} \
+		$(1)/usr/lib/xtables-addons/
+	$(INSTALL_DIR) $(1)/usr/share/xt_asn
+	touch $(1)/usr/share/xt_asn/.keep
+endef
+
+
 define Package/iptgeoip
   $(call Package/xtables-addons)
   CATEGORY:=Network
@@ -158,7 +184,7 @@ endif
 define Package/iptgeoip/install
 	$(INSTALL_DIR) $(1)/usr/lib/xtables-addons
 	$(CP) \
-		$(PKG_INSTALL_DIR)/usr/lib/xtables-addons/xt_geoip_{build,dl} \
+		$(PKG_INSTALL_DIR)/usr/lib/xtables-addons/xt_geoip_{build,dl}{,_maxmind} \
 		$(1)/usr/lib/xtables-addons/
 	$(INSTALL_DIR) $(1)/usr/bin
 	$(CP) \
@@ -175,6 +201,7 @@ $(eval $(call BuildTemplate,compat-xtables,API compatibilty layer,,compat_xtable
 $(eval $(call BuildTemplate,nathelper-rtsp,RTSP Conntrack and NAT,,rtsp/nf_conntrack_rtsp rtsp/nf_nat_rtsp,+kmod-ipt-conntrack-extra +kmod-ipt-nat))
 
 $(eval $(call BuildTemplate,account,ACCOUNT,xt_ACCOUNT,ACCOUNT/xt_ACCOUNT,+kmod-ipt-compat-xtables))
+$(eval $(call BuildTemplate,asn,asn,xt_asn,xt_asn,))
 $(eval $(call BuildTemplate,chaos,CHAOS,xt_CHAOS,xt_CHAOS,+kmod-ipt-compat-xtables +kmod-ipt-delude +kmod-ipt-tarpit))
 $(eval $(call BuildTemplate,condition,Condition,xt_condition,xt_condition,))
 $(eval $(call BuildTemplate,delude,DELUDE,xt_DELUDE,xt_DELUDE,+kmod-ipt-compat-xtables))
@@ -197,4 +224,5 @@ $(eval $(call BuildTemplate,sysrq,SYSRQ,xt_SYSRQ,xt_SYSRQ,+kmod-ipt-compat-xtabl
 $(eval $(call BuildTemplate,tarpit,TARPIT,xt_TARPIT,xt_TARPIT,+kmod-ipt-compat-xtables))
 
 $(eval $(call BuildPackage,iptaccount))
+$(eval $(call BuildPackage,iptasn))
 $(eval $(call BuildPackage,iptgeoip))
diff --git a/net/xtables-addons/patches/001-fix-kernel-version-detection.patch b/net/xtables-addons/patches/001-fix-kernel-version-detection.patch
index 624fa4d9b..e29b3925c 100644
--- a/net/xtables-addons/patches/001-fix-kernel-version-detection.patch
+++ b/net/xtables-addons/patches/001-fix-kernel-version-detection.patch
@@ -1,6 +1,6 @@
 --- a/configure.ac
 +++ b/configure.ac
-@@ -42,7 +42,7 @@ regular_CFLAGS="-Wall -Waggregate-return
+@@ -41,7 +41,7 @@ regular_CFLAGS="-Wall -Waggregate-return
  
  AS_IF([test -n "$kbuilddir"], [
  	AC_MSG_CHECKING([kernel version that we will build against])
diff --git a/net/xtables-addons/patches/100-add-rtsp-conntrack.patch b/net/xtables-addons/patches/100-add-rtsp-conntrack.patch
index dbdc52e94..befcd06a3 100644
--- a/net/xtables-addons/patches/100-add-rtsp-conntrack.patch
+++ b/net/xtables-addons/patches/100-add-rtsp-conntrack.patch
@@ -1725,7 +1725,7 @@
 +module_exit(fini);
 --- a/extensions/Kbuild
 +++ b/extensions/Kbuild
-@@ -27,6 +27,7 @@ obj-${build_lscan}       += xt_lscan.o
+@@ -28,6 +28,7 @@ obj-${build_lscan}       += xt_lscan.o
  obj-${build_pknock}      += pknock/
  obj-${build_psd}         += xt_psd.o
  obj-${build_quota2}      += xt_quota2.o
@@ -1735,7 +1735,7 @@
  -include ${M}/Kbuild.*
 --- a/mconfig
 +++ b/mconfig
-@@ -23,3 +23,4 @@ build_lscan=m
+@@ -24,3 +24,4 @@ build_lscan=m
  build_pknock=m
  build_psd=m
  build_quota2=m
diff --git a/net/xtables-addons/patches/200-add-lua-packetscript.patch b/net/xtables-addons/patches/200-add-lua-packetscript.patch
index 10cb7676e..c49014e49 100644
--- a/net/xtables-addons/patches/200-add-lua-packetscript.patch
+++ b/net/xtables-addons/patches/200-add-lua-packetscript.patch
@@ -1038,7 +1038,7 @@
 +#endif /* CONTROLLER_H_ */
 --- /dev/null
 +++ b/extensions/LUA/Kbuild
-@@ -0,0 +1,49 @@
+@@ -0,0 +1,51 @@
 +# -*- Makefile -*-
 +
 +# Adding debug options
@@ -1063,6 +1063,8 @@
 +			prot_buf_dynamic.o \
 +
 +
++# Enable <stddef.h> <stdarg.h>
++EXTRA_CFLAGS += -isystem $(shell $(CC) -print-file-name=include)
 +# Adding Lua Support
 +EXTRA_CFLAGS += -I$(src)/lua -I$(src)/lua/include 
 +xt_LUA-y += lua/lapi.o \
@@ -1153,7 +1155,7 @@
 +	struct xt_lua_tginfo *info = (void *)target->data;
 +
 +	info->state_id = 0;
-+	strncpy(info->function, "process_packet\0", sizeof("process_packet\0"));
++	strcpy(info->function, "process_packet\0");
 +}
 +
 +static int
@@ -1361,16 +1363,13 @@
 +#include <linux/string.h>
 --- /dev/null
 +++ b/extensions/LUA/lua/lapi.c
-@@ -0,0 +1,1086 @@
+@@ -0,0 +1,1083 @@
 +/*
 +** $Id: lapi.c,v 2.55.1.5 2008/07/04 18:41:18 roberto Exp $
 +** Lua API
 +** See Copyright Notice in lua.h
 +*/
 +
-+#include <stdarg.h>
-+#include <math.h>
-+#include <assert.h>
 +#include <string.h>
 +
 +#define lapi_c
@@ -5314,7 +5313,7 @@
 +      case OP_FORLOOP:
 +      case OP_FORPREP:
 +        checkreg(pt, a+3);
-+        /* go through */
++        fallthrough;
 +      case OP_JMP: {
 +        int dest = pc+1+b;
 +        /* not full check and jump is forward and do not skip `lastpc'? */
@@ -7729,6 +7728,7 @@
 +        }
 +        else if (sep == -1) return '[';
 +        else luaX_lexerror(ls, "invalid long string delimiter", TK_STRING);
++        fallthrough;
 +      }
 +      case '=': {
 +        next(ls);
@@ -7822,10 +7822,9 @@
 +  lua_assert(ls->lookahead.token == TK_EOS);
 +  ls->lookahead.token = llex(ls, &ls->lookahead.seminfo);
 +}
-+
 --- /dev/null
 +++ b/extensions/LUA/lua/llex.h
-@@ -0,0 +1,81 @@
+@@ -0,0 +1,83 @@
 +/*
 +** $Id: llex.h,v 1.58.1.1 2007/12/27 13:02:25 roberto Exp $
 +** Lexical Analyzer
@@ -7838,6 +7837,8 @@
 +#include "lobject.h"
 +#include "lzio.h"
 +
++/* prevent conflict with definition from asm/current.h */
++#undef current
 +
 +#define FIRST_RESERVED	257
 +
@@ -7909,7 +7910,7 @@
 +#endif
 --- /dev/null
 +++ b/extensions/LUA/lua/llimits.h
-@@ -0,0 +1,125 @@
+@@ -0,0 +1,124 @@
 +/*
 +** $Id: llimits.h,v 1.69.1.1 2007/12/27 13:02:25 roberto Exp $
 +** Limits, basic types, and some other `installation-dependent' definitions
@@ -7920,7 +7921,6 @@
 +#define llimits_h
 +
 +#include <stddef.h>
-+#include <limits.h>
 +
 +#include "lua.h"
 +
@@ -12003,7 +12003,7 @@
 +}
 --- /dev/null
 +++ b/extensions/LUA/lua/ltable.c
-@@ -0,0 +1,588 @@
+@@ -0,0 +1,587 @@
 +/*
 +** $Id: ltable.c,v 2.32.1.2 2007/12/28 15:32:23 roberto Exp $
 +** Lua tables (hash)
@@ -12024,7 +12024,6 @@
 +** Hence even when the load factor reaches 100%, performance remains good.
 +*/
 +
-+#include <math.h>
 +#include <string.h>
 +
 +#define ltable_c
@@ -12482,7 +12481,7 @@
 +      lua_number2int(k, n);
 +      if (luai_numeq(cast_num(k), nvalue(key))) /* index is int? */
 +        return luaH_getnum(t, k);  /* use specialized version */
-+      /* else go through */
++      fallthrough;
 +    }
 +    default: {
 +      Node *n = mainposition(t, key);
@@ -12777,7 +12776,7 @@
 +  if (!lua_isstring(L, -1))
 +    luaL_error(L, "invalid value (%s) at index %d in table for "
 +                  LUA_QL("concat"), luaL_typename(L, -1), i);
-+    luaL_addvalue(b);
++  luaL_addvalue(b);
 +}
 +
 +
@@ -13062,7 +13061,7 @@
 +#endif
 --- /dev/null
 +++ b/extensions/LUA/lua/luaconf.h
-@@ -0,0 +1,797 @@
+@@ -0,0 +1,803 @@
 +/*
 +** $Id: luaconf.h,v 1.82.1.7 2008/02/11 16:25:08 roberto Exp $
 +** Configuration file for Lua
@@ -13078,8 +13077,12 @@
 +#if !defined(__KERNEL__)
 +#include <limits.h>
 +#else
++#include <linux/kernel.h>
++
++#undef UCHAR_MAX
++#undef BUFSIZ
++#undef NO_FPU
 +#define UCHAR_MAX	255
-+#define SHRT_MAX        32767
 +#define BUFSIZ 		8192
 +#define NO_FPU
 +#endif
@@ -13702,6 +13705,8 @@
 +*/
 +#if defined(__KERNEL__)
 +#undef LUA_USE_ULONGJMP
++#define setjmp __builtin_setjmp
++#define longjmp __builtin_longjmp
 +#endif
 +
 +#if defined(__cplusplus)
@@ -15649,7 +15654,7 @@
 +RANLIB = ranlib
 +SED = /bin/sed
 +SET_MAKE = 
-+SHELL = /bin/bash
++SHELL = /bin/sh
 +STRIP = strip
 +VERSION = 1.21
 +abs_builddir = /home/andre/Dropbox/xtables-addons/extensions/LUA
@@ -17221,7 +17226,7 @@
 +
 --- /dev/null
 +++ b/extensions/LUA/prot_buf_ip.c
-@@ -0,0 +1,209 @@
+@@ -0,0 +1,210 @@
 +/*
 + *	Copyright (C) 2010 University of Basel <http://cn.cs.unibas.ch/>
 + *	by Andre Graf <andre@dergraf.org>
@@ -17241,6 +17246,7 @@
 + */
 +
 +#if defined(__KERNEL__)
++	#include <linux/bitops.h>
 +	#include <net/checksum.h>
 +	#include <net/tcp.h>
 +#endif
@@ -17479,7 +17485,7 @@
 +}
 --- /dev/null
 +++ b/extensions/LUA/prot_buf_tcp.c
-@@ -0,0 +1,188 @@
+@@ -0,0 +1,189 @@
 +/*
 + *	Copyright (C) 2010 University of Basel <http://cn.cs.unibas.ch/>
 + *	by Andre Graf <andre@dergraf.org>
@@ -17499,6 +17505,7 @@
 + */
 +
 +#if defined(__KERNEL__)
++	#include <linux/bitops.h>
 +	#include <net/checksum.h>
 +	#include <net/tcp.h>
 +#endif
@@ -17760,7 +17767,7 @@
 +}
 --- /dev/null
 +++ b/extensions/LUA/prot_buf_udp.c
-@@ -0,0 +1,53 @@
+@@ -0,0 +1,54 @@
 +/*
 + *	Copyright (C) 2010 University of Basel <http://cn.cs.unibas.ch/>
 + *	by Andre Graf <andre@dergraf.org>
@@ -17780,6 +17787,7 @@
 + */
 +
 +#if defined(__KERNEL__)
++	#include <linux/bitops.h>
 +	#include <net/checksum.h>
 +#endif
 +
@@ -17877,7 +17885,7 @@
 +#include <linux/kernel.h>
 +#include <linux/slab.h>
 +#include <linux/module.h>
-+#include <asm/uaccess.h>
++#include <linux/uaccess.h>
 +#include <net/ip.h>
 +#include <linux/netfilter/x_tables.h>
 +#include "xt_LUA.h"
@@ -17922,10 +17930,10 @@
 + * XT_CONTINUE inside the *register_lua_packet_lib* function.
 + */
 +
-+spinlock_t lock = SPIN_LOCK_UNLOCKED;
++DEFINE_SPINLOCK(lock);
 +
 +static uint32_t 
-+lua_tg(struct sk_buff *pskb, const struct xt_target_param *par)
++lua_tg(struct sk_buff *pskb, const struct xt_action_param *par)
 +{
 +	uint32_t  verdict;
 +	lua_packet_segment *p;
@@ -17937,7 +17945,7 @@
 +
 +	L = lua_envs[info->state_id]->L;
 +
-+	if (!skb_make_writable(pskb, pskb->len))
++	if (skb_ensure_writable(pskb, pskb->len))
 +		return NF_DROP;
 +
 +	/* call the function provided by --function parameter or the default 'process_packet' defined in Lua */
@@ -17946,11 +17954,11 @@
 +	/* push the lua_packet_segment as a parameter */
 +	p = (lua_packet_segment *)lua_newuserdata(L, sizeof(lua_packet_segment));
 +	if (pskb->mac_header)
-+		p->start = pskb->mac_header;
++		p->start = skb_mac_header(pskb);
 +	else if (pskb->network_header)
-+		p->start = pskb->network_header;
++		p->start = skb_network_header(pskb);
 +	else if (pskb->transport_header)
-+		p->start = pskb->transport_header;
++		p->start = skb_transport_header(pskb);
 +	p->offset = 0;
 +	p->length = (unsigned long)pskb->tail - (unsigned long)p->start;
 +	p->changes = NULL;
@@ -17994,7 +18002,7 @@
 +	int32_t ret;
 +	struct lua_env * env = kmalloc(sizeof(struct lua_env), GFP_KERNEL);
 +
-+	if (!script_size > 0) {
++	if (!script_size) {
 +		pr_debug("LUA [%d]: script_size %lu < 0\n", state_id, script_size);
 +		return false;
 +	}
@@ -18066,16 +18074,16 @@
 + * some workqueue initialization. So far this is done each time this function
 + * is called, subject to change.
 + */
-+static bool
++static int
 +lua_tg_checkentry(const struct xt_tgchk_param *par)
 +{
 +	const struct xt_lua_tginfo *info = par->targinfo;
 +
 +	if (load_script_into_state(info->state_id, info->script_size, (char *)info->buf)) {
 +		lua_state_refs[info->state_id]++;
-+		return true;
++		return 0;
 +	}
-+	return false;
++	return -EINVAL;
 +}
 +
 +/*::*
@@ -18144,7 +18152,7 @@
 +
 --- a/extensions/Kbuild
 +++ b/extensions/Kbuild
-@@ -28,6 +28,7 @@ obj-${build_pknock}      += pknock/
+@@ -29,6 +29,7 @@ obj-${build_pknock}      += pknock/
  obj-${build_psd}         += xt_psd.o
  obj-${build_quota2}      += xt_quota2.o
  obj-${build_rtsp}        += rtsp/
@@ -18154,14 +18162,14 @@
  -include ${M}/Kbuild.*
 --- a/extensions/Mbuild
 +++ b/extensions/Mbuild
-@@ -23,3 +23,4 @@ obj-${build_pknock}      += pknock/
+@@ -24,3 +24,4 @@ obj-${build_pknock}      += pknock/
  obj-${build_psd}         += libxt_psd.so
  obj-${build_quota2}      += libxt_quota2.so
  obj-${build_gradm}       += libxt_gradm.so
 +obj-${build_LUA}         += LUA/
 --- a/mconfig
 +++ b/mconfig
-@@ -24,3 +24,4 @@ build_pknock=m
+@@ -25,3 +25,4 @@ build_pknock=m
  build_psd=m
  build_quota2=m
  build_rtsp=m
diff --git a/net/xtables-addons/patches/201-fix-lua-packetscript.patch b/net/xtables-addons/patches/201-fix-lua-packetscript.patch
deleted file mode 100644
index 5a016e2ae..000000000
--- a/net/xtables-addons/patches/201-fix-lua-packetscript.patch
+++ /dev/null
@@ -1,136 +0,0 @@
---- a/extensions/LUA/xt_LUA_target.c
-+++ b/extensions/LUA/xt_LUA_target.c
-@@ -19,7 +19,7 @@
- #include <linux/kernel.h>
- #include <linux/slab.h>
- #include <linux/module.h>
--#include <asm/uaccess.h>
-+#include <linux/uaccess.h>
- #include <net/ip.h>
- #include <linux/netfilter/x_tables.h>
- #include "xt_LUA.h"
-@@ -64,10 +64,10 @@ uint32_t  lua_state_refs[LUA_STATE_ARRAY
-  * XT_CONTINUE inside the *register_lua_packet_lib* function.
-  */
- 
--spinlock_t lock = SPIN_LOCK_UNLOCKED;
-+DEFINE_SPINLOCK(lock);
- 
- static uint32_t 
--lua_tg(struct sk_buff *pskb, const struct xt_target_param *par)
-+lua_tg(struct sk_buff *pskb, const struct xt_action_param *par)
- {
- 	uint32_t  verdict;
- 	lua_packet_segment *p;
-@@ -79,7 +79,7 @@ lua_tg(struct sk_buff *pskb, const struc
- 
- 	L = lua_envs[info->state_id]->L;
- 
--	if (!skb_make_writable(pskb, pskb->len))
-+	if (skb_ensure_writable(pskb, pskb->len))
- 		return NF_DROP;
- 
- 	/* call the function provided by --function parameter or the default 'process_packet' defined in Lua */
-@@ -88,11 +88,11 @@ lua_tg(struct sk_buff *pskb, const struc
- 	/* push the lua_packet_segment as a parameter */
- 	p = (lua_packet_segment *)lua_newuserdata(L, sizeof(lua_packet_segment));
- 	if (pskb->mac_header)
--		p->start = pskb->mac_header;
-+		p->start = skb_mac_header(pskb);
- 	else if (pskb->network_header)
--		p->start = pskb->network_header;
-+		p->start = skb_network_header(pskb);
- 	else if (pskb->transport_header)
--		p->start = pskb->transport_header;
-+		p->start = skb_transport_header(pskb);
- 	p->offset = 0;
- 	p->length = (unsigned long)pskb->tail - (unsigned long)p->start;
- 	p->changes = NULL;
-@@ -208,16 +208,16 @@ static bool load_script_into_state(uint3
-  * some workqueue initialization. So far this is done each time this function
-  * is called, subject to change.
-  */
--static bool
-+static int
- lua_tg_checkentry(const struct xt_tgchk_param *par)
- {
- 	const struct xt_lua_tginfo *info = par->targinfo;
- 
- 	if (load_script_into_state(info->state_id, info->script_size, (char *)info->buf)) {
- 		lua_state_refs[info->state_id]++;
--		return true;
-+		return 0;
- 	}
--	return false;
-+	return -EINVAL;
- }
- 
- /*::*
---- a/extensions/LUA/lua/llimits.h
-+++ b/extensions/LUA/lua/llimits.h
-@@ -8,7 +8,6 @@
- #define llimits_h
- 
- #include <stddef.h>
--#include <limits.h>
- 
- #include "lua.h"
- 
---- a/extensions/LUA/lua/lapi.c
-+++ b/extensions/LUA/lua/lapi.c
-@@ -4,9 +4,6 @@
- ** See Copyright Notice in lua.h
- */
- 
--#include <stdarg.h>
--#include <math.h>
--#include <assert.h>
- #include <string.h>
- 
- #define lapi_c
---- a/extensions/LUA/lua/ltable.c
-+++ b/extensions/LUA/lua/ltable.c
-@@ -18,7 +18,6 @@
- ** Hence even when the load factor reaches 100%, performance remains good.
- */
- 
--#include <math.h>
- #include <string.h>
- 
- #define ltable_c
---- a/extensions/LUA/lua/luaconf.h
-+++ b/extensions/LUA/lua/luaconf.h
-@@ -13,8 +13,12 @@
- #if !defined(__KERNEL__)
- #include <limits.h>
- #else
-+#include <linux/kernel.h>
-+
-+#undef UCHAR_MAX
-+#undef BUFSIZ
-+#undef NO_FPU
- #define UCHAR_MAX	255
--#define SHRT_MAX        32767
- #define BUFSIZ 		8192
- #define NO_FPU
- #endif
-@@ -637,6 +641,8 @@ union luai_Cast { double l_d; long l_l;
- */
- #if defined(__KERNEL__)
- #undef LUA_USE_ULONGJMP
-+#define setjmp __builtin_setjmp
-+#define longjmp __builtin_longjmp
- #endif
- 
- #if defined(__cplusplus)
---- a/extensions/LUA/lua/llex.h
-+++ b/extensions/LUA/lua/llex.h
-@@ -10,6 +10,8 @@
- #include "lobject.h"
- #include "lzio.h"
- 
-+/* prevent conflict with definition from asm/current.h */
-+#undef current
- 
- #define FIRST_RESERVED	257
- 
diff --git a/net/xtables-addons/patches/210-freebsd-build-fix.patch b/net/xtables-addons/patches/210-freebsd-build-fix.patch
deleted file mode 100644
index 4f05d60eb..000000000
--- a/net/xtables-addons/patches/210-freebsd-build-fix.patch
+++ /dev/null
@@ -1,11 +0,0 @@
---- a/extensions/LUA/Makefile
-+++ b/extensions/LUA/Makefile
-@@ -110,7 +110,7 @@ PKG_CONFIG = /usr/bin/pkg-config
- RANLIB = ranlib
- SED = /bin/sed
- SET_MAKE = 
--SHELL = /bin/bash
-+SHELL = /bin/sh
- STRIP = strip
- VERSION = 1.21
- abs_builddir = /home/andre/Dropbox/xtables-addons/extensions/LUA
diff --git a/net/xtables-addons/patches/300-fix-path-Makefile.extra.patch b/net/xtables-addons/patches/300-fix-path-Makefile.extra.patch
new file mode 100644
index 000000000..34791746c
--- /dev/null
+++ b/net/xtables-addons/patches/300-fix-path-Makefile.extra.patch
@@ -0,0 +1,11 @@
+--- a/extensions/ACCOUNT/Makefile.am
++++ b/extensions/ACCOUNT/Makefile.am
+@@ -3,7 +3,7 @@
+ AM_CPPFLAGS = ${regular_CPPFLAGS} -I${abs_top_srcdir}/extensions
+ AM_CFLAGS   = ${regular_CFLAGS} ${libxtables_CFLAGS}
+ 
+-include ${top_srcdir}/Makefile.extra
++include ../../Makefile.extra
+ 
+ sbin_PROGRAMS = iptaccount
+ iptaccount_LDADD = libxt_ACCOUNT_cl.la
-- 
2.43.0

